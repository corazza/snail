data Pair<C, D> as
    Pa(C, D)
enddata

def print_both<A, B>(a: A, b: B) -> unit as
    print "(";
    print a;
    print ", ";
    print b;
    print ")";
    return UNIT;
enddef

def print_pair<A, B>(p: Pair<A, B>) -> unit as
    match p as
        Pa(a, b) => print_both(a, b)
    endmatch
    return UNIT;
enddef


def first<E, F>(p: Pair<E, F>) -> E as
    match p as
        Pa(a, b) => return a
    endmatch
enddef

def second<A, B>(p: Pair<A, B>) -> B as
    match p as
        Pa(a, b) => return b
    endmatch
enddef

def dot(a: Pair<int, int>, b: Pair<int, int>) -> int as
    let x1: int = first(a);
    let y1: int = second(a);
    let x2: int = first(b);
    let y2: int = second(b);
    return x1 * x2 + y1 * y2;
enddef

let p1: Pair<int, int> = Pa(1, 6);
let p2: Pair<int, int> = Pa(1, 6);
let p3: Pair<int, Pair<int, int>> = Pa(1, Pa(2, 3));
let p4: Pair<int, string> = Pa(1, "asdf");

print_pair(p1);
print " . ";
print_pair(p2);
print " = ";
print(dot(p1, p2));
print newline;
print first(p4);
print newline;
print second(p4);
