import "../std/liste.snail";
import "../std/io.snail";

operator ++(xs: List<A>, ys: List<A>) -> List<A> as
    match xs as
        Nil => return ys,
        Concat(x, xs) => return Concat(x, xs ++ ys)
    endmatch
endoperator

def unesi_element(n: int, xs: List<A>) -> List<A> as
    print("Unesite element ");
    print(n);
    print(": ");
    let x: int = to_int(input());
    return Concat(x, xs);
enddef

def unesi_n_elemenata_rek(xs: List<A>, n: int) -> List<A> as
    if n == 0 then
        return xs;
    else
        xs = unesi_element(n, xs);
        return unesi_n_elemenata_rek(xs, n - 1);
    endif
enddef

def unesi_n_elemenata(n: int) -> List<int> as
    let lista: List<int> = Nil;
    return unesi_n_elemenata_rek(lista, n);
enddef

def unesi_listu() -> List<int> as
    print("Unesite broj elemenata: ");
    let n: int = to_int(input());
    return unesi_n_elemenata(n);
enddef

let lista: List<int> = unesi_listu();
println("Unesena lista:");
println(lista);

print("Prvi element: ");

match head(lista) as
    None => println("nema ga"),
    Some(x) => println(x)
endmatch

println("Unos druge liste...");
let lista2: List<int> = unesi_listu();

print("prva ++ druga == ");
println(lista ++ lista2);
